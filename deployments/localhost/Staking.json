{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stakingToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "Staking_NeedMoreZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Staking_TransferFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ClaimReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Earned",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REWARD_RATE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "RewardPerToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "s_UserRewardPerTokenPaid",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "s_balances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_lastUpdateTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_rewardPerTokenStored",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_rewardToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "s_rewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_stakingToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xbf8812add58f735803406efbda04e8d1930a2c1d7bada9a3a1b5baa943643484",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "946421",
    "logsBloom": "0x
    "blockHash": "0xfdc38e07d9147fc94d1b237511bfb5945b0dd6c12672d1820ce4623ae596d0b8",
    "transactionHash": "0xbf8812add58f735803406efbda04e8d1930a2c1d7bada9a3a1b5baa943643484",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "946421",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  ],
  "numDeployments": 1,
  "solcInputHash": "89d1e1403f2059a3a377201b012d533e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakingToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Staking_NeedMoreZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Staking_TransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ClaimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REWARD_RATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"s_UserRewardPerTokenPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"s_balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_lastUpdateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_rewardPerTokenStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_rewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"s_rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_stakingToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Staking.sol\":\"Staking\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"contracts/Staking.sol\":{\"content\":\"// SPDX-License-Identifier : MIT\\n// stake : Lock tokens into our smart contract\\n// withdraw : unlock tokens and pull out of the conract\\n// claimRewards : users get their reward tokens\\n\\npragma solidity ^0.8.7;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ncontract Staking {\\n    IERC20 public s_stakingToken;\\n    IERC20 public s_rewardToken;\\n\\n    // address-> how much quantity of tokens it has staked\\n    mapping(address => uint256) public s_balances;\\n\\n    //mapping of how much reward each address has to claim\\n    mapping(address => uint256) public s_rewards;\\n\\n    // mapping of how much each address has been paid reward tokens\\n    mapping(address => uint256) public s_UserRewardPerTokenPaid;\\n\\n    // total no of tokens sent to this contract\\n    uint256 public s_totalSupply;\\n    uint256 public s_rewardPerTokenStored;\\n    uint256 public s_lastUpdateTime;\\n    uint256 public constant REWARD_RATE = 100; // reward tokens per sec\\n\\n    error Staking_TransferFailed();\\n    error Staking_NeedMoreZero();\\n\\n    modifier updateReward(address account) {\\n        // how much reward per token\\n        s_rewardPerTokenStored = RewardPerToken();\\n        s_lastUpdateTime = block.timestamp;\\n        s_rewards[account] = Earned(account);\\n        s_UserRewardPerTokenPaid[account] = s_rewardPerTokenStored;\\n        _;\\n    }\\n\\n    modifier moreThanZero(uint256 amount) {\\n        if (amount == 0) {\\n            revert Staking_NeedMoreZero();\\n        }\\n        _;\\n    }\\n\\n    function RewardPerToken() public view returns (uint256) {\\n        if (s_totalSupply == 0) {\\n            return s_rewardPerTokenStored;\\n        }\\n        return\\n            s_rewardPerTokenStored +\\n            (((block.timestamp - s_lastUpdateTime) * REWARD_RATE) * 1e18) /\\n            s_totalSupply;\\n    }\\n\\n    function Earned(address account) public view returns (uint256) {\\n        uint256 currentBalance = s_balances[account];\\n        uint256 amountPaid = s_UserRewardPerTokenPaid[account]; //how much investors have been paid already\\n        uint256 currentRewardPerToken = RewardPerToken();\\n        uint256 pastRewards = s_rewards[account];\\n        uint256 earned = (((currentBalance * (currentRewardPerToken - amountPaid)) / 1e18) +\\n            pastRewards);\\n        return earned;\\n    }\\n\\n    constructor(address stakingToken, address rewardToken) {\\n        s_stakingToken = IERC20(stakingToken);\\n        s_rewardToken = IERC20(rewardToken);\\n    }\\n\\n    // We allow only ERC20 tokens for staking\\n\\n    function Stake(uint256 amount) external updateReward(msg.sender) moreThanZero(amount) {\\n        // keep track of how much this user has staked\\n        s_balances[msg.sender] += amount;\\n        s_totalSupply += amount;\\n        //emit event\\n        bool success = s_stakingToken.transferFrom(msg.sender, address(this), amount);\\n\\n        //require(success, \\\"failed\\\");\\n        if (!success) {\\n            revert Staking_TransferFailed();\\n        }\\n    }\\n\\n    function Withdraw(uint256 amount) external updateReward(msg.sender) moreThanZero(amount) {\\n        s_balances[msg.sender] -= amount;\\n        s_totalSupply -= amount;\\n        //emit event\\n        bool success = s_stakingToken.transfer(msg.sender, amount);\\n\\n        //require(success, \\\"failed\\\");\\n        if (!success) {\\n            revert Staking_TransferFailed();\\n        }\\n    }\\n\\n    function ClaimReward() external updateReward(msg.sender) {\\n        // How much reward do investors get ?\\n        uint256 reward = s_rewards[msg.sender];\\n        bool success = s_rewardToken.transfer(msg.sender, reward);\\n        if (!success) {\\n            revert Staking_TransferFailed();\\n        }\\n\\n        //\\n    }\\n}\\n\",\"keccak256\":\"0x33a054e2596596b0d41803f31ecdbaab8bc5de29847960bf933e61661bdda39b\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620010ca380380620010ca8339818101604052810190620000379190620000d7565b816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505062000171565b600081519050620000d18162000157565b92915050565b60008060408385031215620000f157620000f062000152565b5b60006200010185828601620000c0565b92505060206200011485828601620000c0565b9150509250929050565b60006200012b8262000132565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600080fd5b62000162816200011e565b81146200016e57600080fd5b50565b610f4980620001816000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c80636aa0838f1161008c5780637e181117116100665780637e18111714610215578063ab32eb6914610245578063adca9b7214610275578063bea0815114610293576100ea565b80636aa0838f146101cf5780636c031fb6146101ed57806379372f9a1461020b576100ea565b80635997bb37116100c85780635997bb37146101595780635b6b431d146101775780636374cc00146101935780636a74a0fc146101b1576100ea565b806312f82cbc146100ef578063227a473b1461011f578063304ac91b1461013b575b600080fd5b61010960048036038101906101049190610b8e565b6102c3565b6040516101169190610cbd565b60405180910390f35b61013960048036038101906101349190610be8565b6103e2565b005b610143610626565b6040516101509190610cbd565b60405180910390f35b61016161062c565b60405161016e9190610cbd565b60405180910390f35b610191600480360381019061018c9190610be8565b610631565b005b61019b610873565b6040516101a89190610ca2565b60405180910390f35b6101b9610899565b6040516101c69190610cbd565b60405180910390f35b6101d761089f565b6040516101e49190610cbd565b60405180910390f35b6101f56108a5565b6040516102029190610cbd565b60405180910390f35b610213610908565b005b61022f600480360381019061022a9190610b8e565b610ae3565b60405161023c9190610cbd565b60405180910390f35b61025f600480360381019061025a9190610b8e565b610afb565b60405161026c9190610cbd565b60405180910390f35b61027d610b13565b60405161028a9190610ca2565b60405180910390f35b6102ad60048036038101906102a89190610b8e565b610b37565b6040516102ba9190610cbd565b60405180910390f35b600080600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060006103566108a5565b90506000600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600081670de0b6b3a764000085856103b49190610db9565b876103bf9190610d5f565b6103c99190610d2e565b6103d39190610cd8565b90508095505050505050919050565b336103eb6108a5565b60068190555042600781905550610401816102c3565b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600654600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508160008114156104c6576040517fc608cfbb00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b82600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546105159190610cd8565b92505081905550826005600082825461052e9190610cd8565b9250508190555060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330876040518463ffffffff1660e01b815260040161059593929190610c42565b602060405180830381600087803b1580156105af57600080fd5b505af11580156105c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105e79190610bbb565b905080610620576040517f37fe98c900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50505050565b60065481565b606481565b3361063a6108a5565b60068190555042600781905550610650816102c3565b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600654600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000811415610715576040517fc608cfbb00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b82600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546107649190610db9565b92505081905550826005600082825461077d9190610db9565b9250508190555060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33866040518363ffffffff1660e01b81526004016107e2929190610c79565b602060405180830381600087803b1580156107fc57600080fd5b505af1158015610810573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108349190610bbb565b90508061086d576040517f37fe98c900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60055481565b60075481565b60008060055414156108bb576006549050610905565b600554670de0b6b3a76400006064600754426108d79190610db9565b6108e19190610d5f565b6108eb9190610d5f565b6108f59190610d2e565b6006546109029190610cd8565b90505b90565b336109116108a5565b60068190555042600781905550610927816102c3565b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600654600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33846040518363ffffffff1660e01b8152600401610a53929190610c79565b602060405180830381600087803b158015610a6d57600080fd5b505af1158015610a81573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aa59190610bbb565b905080610ade576040517f37fe98c900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505050565b60046020528060005260406000206000915090505481565b60026020528060005260406000206000915090505481565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60036020528060005260406000206000915090505481565b600081359050610b5e81610ece565b92915050565b600081519050610b7381610ee5565b92915050565b600081359050610b8881610efc565b92915050565b600060208284031215610ba457610ba3610ec9565b5b6000610bb284828501610b4f565b91505092915050565b600060208284031215610bd157610bd0610ec9565b5b6000610bdf84828501610b64565b91505092915050565b600060208284031215610bfe57610bfd610ec9565b5b6000610c0c84828501610b79565b91505092915050565b610c1e81610ded565b82525050565b610c2d81610e35565b82525050565b610c3c81610e2b565b82525050565b6000606082019050610c576000830186610c15565b610c646020830185610c15565b610c716040830184610c33565b949350505050565b6000604082019050610c8e6000830185610c15565b610c9b6020830184610c33565b9392505050565b6000602082019050610cb76000830184610c24565b92915050565b6000602082019050610cd26000830184610c33565b92915050565b6000610ce382610e2b565b9150610cee83610e2b565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610d2357610d22610e6b565b5b828201905092915050565b6000610d3982610e2b565b9150610d4483610e2b565b925082610d5457610d53610e9a565b5b828204905092915050565b6000610d6a82610e2b565b9150610d7583610e2b565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610dae57610dad610e6b565b5b828202905092915050565b6000610dc482610e2b565b9150610dcf83610e2b565b925082821015610de257610de1610e6b565b5b828203905092915050565b6000610df882610e0b565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610e4082610e47565b9050919050565b6000610e5282610e59565b9050919050565b6000610e6482610e0b565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600080fd5b610ed781610ded565b8114610ee257600080fd5b50565b610eee81610dff565b8114610ef957600080fd5b50565b610f0581610e2b565b8114610f1057600080fd5b5056fea2646970667358221220cabcf8a69b7f78d1a9edba81fbbf4eddd373913470fb7c0adffaffd3efb669c764736f6c63430008070033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100ea5760003560e01c80636aa0838f1161008c5780637e181117116100665780637e18111714610215578063ab32eb6914610245578063adca9b7214610275578063bea0815114610293576100ea565b80636aa0838f146101cf5780636c031fb6146101ed57806379372f9a1461020b576100ea565b80635997bb37116100c85780635997bb37146101595780635b6b431d146101775780636374cc00146101935780636a74a0fc146101b1576100ea565b806312f82cbc146100ef578063227a473b1461011f578063304ac91b1461013b575b600080fd5b61010960048036038101906101049190610b8e565b6102c3565b6040516101169190610cbd565b60405180910390f35b61013960048036038101906101349190610be8565b6103e2565b005b610143610626565b6040516101509190610cbd565b60405180910390f35b61016161062c565b60405161016e9190610cbd565b60405180910390f35b610191600480360381019061018c9190610be8565b610631565b005b61019b610873565b6040516101a89190610ca2565b60405180910390f35b6101b9610899565b6040516101c69190610cbd565b60405180910390f35b6101d761089f565b6040516101e49190610cbd565b60405180910390f35b6101f56108a5565b6040516102029190610cbd565b60405180910390f35b610213610908565b005b61022f600480360381019061022a9190610b8e565b610ae3565b60405161023c9190610cbd565b60405180910390f35b61025f600480360381019061025a9190610b8e565b610afb565b60405161026c9190610cbd565b60405180910390f35b61027d610b13565b60405161028a9190610ca2565b60405180910390f35b6102ad60048036038101906102a89190610b8e565b610b37565b6040516102ba9190610cbd565b60405180910390f35b600080600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060006103566108a5565b90506000600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600081670de0b6b3a764000085856103b49190610db9565b876103bf9190610d5f565b6103c99190610d2e565b6103d39190610cd8565b90508095505050505050919050565b336103eb6108a5565b60068190555042600781905550610401816102c3565b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600654600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508160008114156104c6576040517fc608cfbb00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b82600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546105159190610cd8565b92505081905550826005600082825461052e9190610cd8565b9250508190555060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330876040518463ffffffff1660e01b815260040161059593929190610c42565b602060405180830381600087803b1580156105af57600080fd5b505af11580156105c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105e79190610bbb565b905080610620576040517f37fe98c900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50505050565b60065481565b606481565b3361063a6108a5565b60068190555042600781905550610650816102c3565b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600654600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000811415610715576040517fc608cfbb00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b82600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546107649190610db9565b92505081905550826005600082825461077d9190610db9565b9250508190555060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33866040518363ffffffff1660e01b81526004016107e2929190610c79565b602060405180830381600087803b1580156107fc57600080fd5b505af1158015610810573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108349190610bbb565b90508061086d576040517f37fe98c900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60055481565b60075481565b60008060055414156108bb576006549050610905565b600554670de0b6b3a76400006064600754426108d79190610db9565b6108e19190610d5f565b6108eb9190610d5f565b6108f59190610d2e565b6006546109029190610cd8565b90505b90565b336109116108a5565b60068190555042600781905550610927816102c3565b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600654600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33846040518363ffffffff1660e01b8152600401610a53929190610c79565b602060405180830381600087803b158015610a6d57600080fd5b505af1158015610a81573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aa59190610bbb565b905080610ade576040517f37fe98c900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505050565b60046020528060005260406000206000915090505481565b60026020528060005260406000206000915090505481565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60036020528060005260406000206000915090505481565b600081359050610b5e81610ece565b92915050565b600081519050610b7381610ee5565b92915050565b600081359050610b8881610efc565b92915050565b600060208284031215610ba457610ba3610ec9565b5b6000610bb284828501610b4f565b91505092915050565b600060208284031215610bd157610bd0610ec9565b5b6000610bdf84828501610b64565b91505092915050565b600060208284031215610bfe57610bfd610ec9565b5b6000610c0c84828501610b79565b91505092915050565b610c1e81610ded565b82525050565b610c2d81610e35565b82525050565b610c3c81610e2b565b82525050565b6000606082019050610c576000830186610c15565b610c646020830185610c15565b610c716040830184610c33565b949350505050565b6000604082019050610c8e6000830185610c15565b610c9b6020830184610c33565b9392505050565b6000602082019050610cb76000830184610c24565b92915050565b6000602082019050610cd26000830184610c33565b92915050565b6000610ce382610e2b565b9150610cee83610e2b565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610d2357610d22610e6b565b5b828201905092915050565b6000610d3982610e2b565b9150610d4483610e2b565b925082610d5457610d53610e9a565b5b828204905092915050565b6000610d6a82610e2b565b9150610d7583610e2b565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610dae57610dad610e6b565b5b828202905092915050565b6000610dc482610e2b565b9150610dcf83610e2b565b925082821015610de257610de1610e6b565b5b828203905092915050565b6000610df882610e0b565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610e4082610e47565b9050919050565b6000610e5282610e59565b9050919050565b6000610e6482610e0b565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600080fd5b610ed781610ded565b8114610ee257600080fd5b50565b610eee81610dff565b8114610ef957600080fd5b50565b610f0581610e2b565b8114610f1057600080fd5b5056fea2646970667358221220cabcf8a69b7f78d1a9edba81fbbf4eddd373913470fb7c0adffaffd3efb669c764736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 829,
        "contract": "contracts/Staking.sol:Staking",
        "label": "s_stakingToken",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IERC20)711"
      },
      {
        "astId": 832,
        "contract": "contracts/Staking.sol:Staking",
        "label": "s_rewardToken",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IERC20)711"
      },
      {
        "astId": 836,
        "contract": "contracts/Staking.sol:Staking",
        "label": "s_balances",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 840,
        "contract": "contracts/Staking.sol:Staking",
        "label": "s_rewards",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 844,
        "contract": "contracts/Staking.sol:Staking",
        "label": "s_UserRewardPerTokenPaid",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 846,
        "contract": "contracts/Staking.sol:Staking",
        "label": "s_totalSupply",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 848,
        "contract": "contracts/Staking.sol:Staking",
        "label": "s_rewardPerTokenStored",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 850,
        "contract": "contracts/Staking.sol:Staking",
        "label": "s_lastUpdateTime",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)711": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}